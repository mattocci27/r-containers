name: Build and Push Docker Images

on:
  schedule:
    - cron: '0 0 * * 1'
  push:
    paths:
      - 'images/**'
      - 'bakefiles/**'
      - '**/update.yml'
  workflow_dispatch:

env:
  LATEST_TAG: 4.5.1
  IMAGES: radian radian-verse radian-zsh radian-ai cmdstan-verse cmdstan-zsh cmdstan-ai

jobs:
  build-single-arch:
    name: Build ${{ matrix.arch }} images
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: amd64
            runner: ubuntu-latest
            bakefile: bakefiles/bakefile_amd.json
          - arch: arm64
            runner: ubuntu-24.04-arm
            bakefile: bakefiles/bakefile_arm.json
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - uses: abatilo/actions-poetry@v4

      - name: Cache Poetry virtualenv
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Generate build definitions
        run: |
          poetry --version
          poetry install --no-root
          poetry run python scripts/update.py
          poetry run python scripts/generate_bake.py

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push ${{ matrix.arch }} images
        run: |
          for image in ${IMAGES}; do
            echo "Building ${image} for ${{ matrix.arch }}"
            docker buildx bake -f ${{ matrix.bakefile }} --push ${image}
          done

  publish-manifests:
    name: Publish multi-arch manifests
    runs-on: ubuntu-latest
    needs: build-single-arch
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create and push manifest lists
        run: |
          set -euo pipefail
          for image in ${IMAGES}; do
            echo "Processing ${image}"
            docker pull mattocci/${image}:${LATEST_TAG}_amd64
            docker pull mattocci/${image}:${LATEST_TAG}_arm64
            amd64_digest=$(docker manifest inspect mattocci/${image}:${LATEST_TAG}_amd64 | \
              jq -r '.manifests[] | select(.platform.architecture=="amd64") | .digest')
            if [ -z "${amd64_digest}" ] || [ "${amd64_digest}" = "null" ]; then
              echo "Unable to determine AMD64 digest for ${image}"
              exit 1
            fi
            echo "AMD64 digest for ${image}: ${amd64_digest}"
            docker manifest rm mattocci/${image}:${LATEST_TAG} || true
            docker manifest create mattocci/${image}:${LATEST_TAG} \
              "mattocci/${image}@${amd64_digest}" \
              mattocci/${image}:${LATEST_TAG}_arm64
            docker manifest push mattocci/${image}:${LATEST_TAG}
            docker manifest rm mattocci/${image}:latest || true
            docker manifest create mattocci/${image}:latest \
              "mattocci/${image}@${amd64_digest}" \
              mattocci/${image}:${LATEST_TAG}_arm64
            docker manifest push mattocci/${image}:latest
          done
